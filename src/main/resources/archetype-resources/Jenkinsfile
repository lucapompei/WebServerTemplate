pipeline {

  environment {
    
    // Project properties
    projectName = '${artifactId}'

    // SonarQube properties
    sonarServer = '/** INSERT YOUR SONAR SERVER NAME **/'

    // Docker properties
    registryURL = '/** INSERT YOUR REGISTRY URL **/'
    registryCredential = '/** INSERT YOUR REGISTRY CREDENTIAL **/'

    // OpenShift properties
    openShiftCredentials = 'KUBECONFIG_CONTENT_CREDENTIALS'
    openShiftCluster = '/** INSERT YOUR OPENSHIFT CLUSTER **/'
    openShiftProjectName = '/** INSERT YOUR OPENSHIFT PROJECT NAME **/'

  }
  
  agent any
  
  stages {
  
    stage('Defining environment') {
      steps {
        script {
          echo "Defining environment"
          if (env.BRANCH_NAME != "master") {
            echo "Setting master env"
            env.ENVIRONMENT = "master"
            env.GIT_TAG = sh(returnStdout: true, script: 'git tag -l --points-at HEAD').trim()
          } else {
            echo "Setting dev env"
            env.ENVIRONMENT = "dev"
          }
        }
      }
    }

    stage('Compiling application') {
      steps {
        script {
          echo "Compiling application"
          sh 'mvn clean package'
        }
      }
    }

    stage('SonarQube analysis') {
	    steps {
	      script { 
		    try {
              // requires SonarQube Scanner 2.8+
              def scannerHome = tool 'SonarQube Scanner';
              withSonarQubeEnv(sonarServer) {
                sh "${scannerHome}/bin/sonar-scanner"
              }
            } catch (Exception e) {
              echo "Error during reporting on SonarQube"
            }
	   	  }
	    }
	  }

    stage('Building Docker image') {
      steps {
        script {
          echo "Building Docker image"
          docker.withRegistry(registryURL + projectName, registryCredential) {
            docker.build(projectName + ":latest").push()
            docker.build(projectName + ":${env.BUILD_NUMBER}").push()
            if (env.ENVIRONMENT == "master" && env.GIT_TAG != "") {
              docker.build(projectName + ":${env.GIT_TAG}").push()
            }
            echo "Docker image pushed"
          }
        }
      }
    }
    
    stage('Publishing on OpenShift') {
      steps {
        script {
          if (env.ENVIRONMENT != "master") {
            echo "Master branch, skipping deploy on Openshift"
          } else {
            echo "Publishing on OpenShift"
            sh "config/interpolate.sh"
            withCredentials([kubeconfigContent(credentialsId: openShiftCredentials, variable: 'KUBECONFIG_CONTENT')]){
              sh '''echo "$KUBECONFIG_CONTENT" > kubeconfig'''
              // Update OpenShift configuration
              sh("oc apply --kubeconfig=kubeconfig -f config/deployment.yml")
              // Try to expose route, otherwise ignore the error
              sh '''! oc expose --kubeconfig=kubeconfig svc/"$projectName"'''
              sh '''oc rollout latest --kubeconfig=kubeconfig dc/"$projectName"'''
            }
          }
        }
      }
    }
	
    stage('Verifying') {
      steps {
        script {
          if (env.ENVIRONMENT != "master") {
            echo "Master branch, skipping verifying on Openshift"
          } else {
            echo "Verifying"
            sh '''oc rollout status dc/"$projectName"'''
          }
        }
      }
    }

  }

}