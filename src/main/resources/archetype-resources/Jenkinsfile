pipeline {

  environment {
    
    // Project properties
    projectName = '${artifactId}'

    // SonarQube properties
    sonarServer = '/** INSERT YOUR SONAR SERVER NAME **/'

    // Docker properties
    registryURL = '/** INSERT YOUR REGISTRY URL **/'
    registryCredential = '/** INSERT YOUR REGISTRY CREDENTIAL **/'
    #if (${withKubernetes} == 'Y')

    // Kubernetes properties
    kubernetesCredentials = 'KUBECONFIG_CONTENT_CREDENTIALS'
    kubernetesCluster = '/** INSERT YOUR KUBERNETES CLUSTER **/'
    #end
    #if (${withMattermost} == 'Y')

    // Mattermost properties
    mattermostChannel = 'MY_MATTERMOST_CHANNEL'
    mattermostUrlWebHook = '/** INSERT YOUR MATTERMOST WEBHOOK **/'
    #end
    #if (${withGoogleChat} == 'Y')

    // Mattermost properties
    googleChatUrlWebHook = '/** INSERT YOUR GOOGLE CHAT WEBHOOK **/'
    #end

  }
  
  agent any
  #if (${javaVersion} == '17')

  tools {
    jdk 'Open JDK 17'
    maven 'maven-3.8'
  }
  #end
  
  stages {
  
    stage('Defining environment') {
      steps {
        script {
          echo "Defining environment"
          if (env.GIT_BRANCH == "origin/master") {
            echo "Setting master env"
            env.ENVIRONMENT = "master"
            env.GIT_TAG = sh(returnStdout: true, script: 'git tag -l --points-at HEAD').trim()
          } else {
            echo "Setting dev env"
            env.ENVIRONMENT = "dev"
          }
        }
      }
    }

    stage('Compiling application') {
      steps {
        script {
          echo "Compiling application"
          sh 'mvn -DskipTests clean package'
        }
      }
    }
    
    stage('Test') {
      steps {
        echo 'Avvio degli Unit Test in corso...'
        //Esecuzione dei tests e creazione report
        sh 'mvn surefire-report:report'
      }
      
      post {
        always {
          //Rendo disponibili a JaCoCo i reports generati
          junit 'target/surefire-reports/*.xml'
        }
      }
    }

    stage('SonarQube analysis') {
	  steps {
	    script {
	      if (env.ENVIRONMENT == "dev") {
	        try {
              // requires SonarQube Scanner 2.8+
              def scannerHome = tool 'SonarQube Scanner';
              withSonarQubeEnv(sonarServer) {
                sh "${scannerHome}/bin/sonar-scanner"
              }
            } catch (Exception e) {
              echo "Error during reporting on SonarQube"
            }
          } else {
	        echo "Skipping SonarQube in a non-dev environment"
	      }
	   	}
	  }
	}
	
	stage("Quality Gate") {
      steps {
        script {
          if (env.ENVIRONMENT == "dev") {
            timeout(time: 1, unit: 'HOURS') {
              // Mi assicuro che il quality gate sia superato prima di effettuare altre azioni
              waitForQualityGate abortPipeline: true
            }
          } else {
            echo "Skipping Quality Gate check in a non-dev environment"
          }
        }
      }
    }
    #if (${withKubernetes} == 'Y')
    stage('Building Docker image') {
      steps {
        script {
          echo "Building Docker image"
          docker.withRegistry(registryURL + projectName, registryCredential) {
            def baseImage = docker.build(projectName + ":latest");
            baseImage.push()
            docker.build(projectName + ":${env.BUILD_NUMBER}").push()
            if (env.ENVIRONMENT == "master" && env.GIT_TAG != "") {
              docker.build(projectName + ":${env.GIT_TAG}").push()
            }
            echo "Docker image pushed"
          }
        }
      }
    }

    stage('Publishing on Kubernetes') {
      steps {
        script {
          if (env.ENVIRONMENT != "master") {
            echo "Not master branch, skipping deploy on Kubernetes"
          } else {
            echo "Publishing on Kubernetes"
            sh "config/interpolate.sh"
            withCredentials([kubeconfigContent(credentialsId: kubernetesCredentials, variable: 'KUBECONFIG_CONTENT')]){
              sh '''echo "$KUBECONFIG_CONTENT" > kubeconfig'''
              // Update Kubernetes configuration
              sh("kubectl --kubeconfig=kubeconfig -f config/deployment.yml")
            }
          }
        }
      }
    }
    #end

}
    
	post {
    always {
      echo 'One way or another, I have finished'
      deleteDir() /* clean up our workspace */
    }
    #if (${withMattermost} == 'Y' || ${withGoogleChat} == 'Y')

    success {
      #if (${withMattermost} == 'Y')
      mattermostSend(color: "#a4c639", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "Build n.${env.BUILD_NUMBER} of ${env.JOB_NAME} completed", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      #end
      #if (${withGoogleChat} == 'Y')
        googlechatnotification url: $googleChatUrlWebHook, message: "Build n.${env.BUILD_NUMBER} of ${env.JOB_NAME} completed"
      #end
    }

    unstable {
      #if (${withMattermost} == 'Y')
      mattermostSend(color: "#ffbf00", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "Build Unstable!", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      #end
      #if (${withGoogleChat} == 'Y')
        googlechatnotification url: $googleChatUrlWebHook, message: "Build Unstable!"
      #end
    }

    failure {
      #if (${withMattermost} == 'Y')
      mattermostSend(color: "#c0392b", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "WARNING -- Build FAILURE!!", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      #end
      #if (${withGoogleChat} == 'Y')
        googlechatnotification url: $googleChatUrlWebHook, message: "WARNING -- Build FAILURE!!"
      #end
    }

    changed {
      #if (${withMattermost} == 'Y')
      mattermostSend(color: "#ffbf00", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "Things were different before...", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      #end
      #if (${withGoogleChat} == 'Y')
        googlechatnotification url: $googleChatUrlWebHook, message: "Things were different before..."
      #end
    }
    #end
	}

}

@NonCPS
def getChangeString() {
  MAX_MSG_LEN = 100
  def changeString = ""

  echo "Gathering SCM changes"
  def changeLogSets = currentBuild.rawBuild.changeSets
  for (int i = 0; i < changeLogSets.size(); i++) {
    def entries = changeLogSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      truncated_msg = entry.msg.take(MAX_MSG_LEN)
      changeString += " - ${truncated_msg} [${entry.author}]\n"
    }
  }

  if (!changeString) {
    changeString = " - No new changes"
  }
  return changeString
}