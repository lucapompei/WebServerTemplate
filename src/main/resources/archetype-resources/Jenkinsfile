pipeline {

  environment {
    
    // Project properties
    projectName = 'bper-analytics'

    // SonarQube properties
    sonarServer = 'sonar'

    // Docker properties
    registryURL = 'http://nexus.sysdata.it:18000'
    registryCredential = 'cf4be614-0ab3-4f17-9b7c-b2a2db5490bf	'

    // OpenShift properties
    openShiftCredentials = 'KUBECONFIG_CONTENT_CREDENTIALS'
    openShiftCluster = 'api-pro-eu-west-1-openshift-com:443'
    openShiftProjectName = 'demo-sysdata'
    
    // Mattermost properties
    mattermostChannel = 'MY_MATTERMOST_CHANNEL'
    mattermostUrlWebHook = 'YXZ'

  }
  
  agent any
  
  stages {
  
    stage('Building Docker image') {
      steps {
        script {
          echo "Building Docker image"
          docker.withRegistry(registryURL + projectName, registryCredential) {
            docker.build(projectName + ":latest").push()
            echo "Docker image pushed"
          }
        }
      }
    }
    
    stage('Publishing on OpenShift') {
      steps {
        script {
          echo "Publishing on OpenShift"
            withCredentials([kubeconfigContent(credentialsId: openShiftCredentials, variable: 'KUBECONFIG_CONTENT')]){
              sh '''echo "$KUBECONFIG_CONTENT" > kubeconfig'''
              // Update OpenShift configuration
              sh("oc apply --kubeconfig=kubeconfig -f config/deployment.yml")
              // Try to expose route, otherwise ignore the error
              sh '''! oc expose --kubeconfig=kubeconfig svc/"$projectName"'''
              sh '''oc rollout latest --kubeconfig=kubeconfig dc/"$projectName"'''
            }
        }
      }
    }
	
    stage('Verifying') {
      steps {
        script {
          if (env.ENVIRONMENT != "master") {
            echo "Master branch, skipping verifying on Openshift"
          } else {
            echo "Verifying"
            sh '''oc rollout status dc/"$projectName"'''
          }
        }
      }
    }
    
    post {
      always {
        echo 'One way or another, I have finished'
        deleteDir() /* clean up our workspace */
      }

      success {
        mattermostSend(color: "#a4c639", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "Build n.${env.BUILD_NUMBER} of ${env.JOB_NAME} completed", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      }

      unstable {
        mattermostSend(color: "#ffbf00", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "Build Unstable!", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      }

      failure {
        mattermostSend(color: "#c0392b", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "WARNING -- Build FAILURE!!", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      }

      changed {
        mattermostSend(color: "#ffbf00", icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: "Le cose erano diverse prima...", channel: $mattermostChannel, endpoint: $mattermostUrlWebHook)
      }
    }

  }

}